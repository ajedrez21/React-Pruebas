{"version":3,"sources":["Components/AddCategory.jsx","Helpers/getGifs.js","Components/GifGridItem.jsx","Components/GifGrid.jsx","Hooks/useFetchGifs.js","Components/GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAkCeA,EA/BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAgBrC,OACI,sBAAMC,SATU,SAACC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OACrCN,EAAc,OAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAjBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACVC,EADU,iDACuCC,UAAWH,GADlD,8DAEGI,MAAOF,GAFV,cAEVG,EAFU,gBAGMA,EAAKC,OAHX,uBAGTC,EAHS,EAGTA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAKD,EAAIC,GACTC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAT1B,kBAYTM,GAZS,4CAAH,sDCARO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OAFAc,QAAQC,IAAI,CAACN,KAAIC,QAAOV,QAGpB,sBAAKgB,UAAU,OAAf,UACK,kCAAMN,KACP,qBAAKO,IAAOjB,EAAMkB,IAAOR,QCuDtBS,EAzDC,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EAEXd,mBAAS,CAChCqB,KAAM,GACNe,SAAS,IAJyB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KA8BtC,OAtBAC,qBAAW,WACP1B,EAASC,GACJ0B,MAAM,SAAAC,GACHC,YAAW,WACPJ,EAAS,CACLjB,KAAMoB,EACNL,SAAS,MAGd,UAIZ,CAACtB,IASGuB,EDlBeM,CAAc7B,GAAhCO,EAX0B,EAW1BA,KAAMe,EAXoB,EAWpBA,QAiBV,OACI,qCACI,mCAAOtB,EAAP,OACEsB,GAAW,2CACb,qBAAKJ,UAAU,YAAf,SAaQX,EAAKE,KAAK,SAAAC,GAAG,OACT,cAAC,EAAD,eAGSA,GAFGA,EAAIC,aEXzBmB,EArCM,SAACC,GAAW,IAAD,EACQ7C,mBAAS,CAAC,cADlB,mBACrB8C,EADqB,KACT/C,EADS,KAS5B,OACI,qCACI,gDAEA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAMQ+C,EAAWvB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCvB7BiC,IAASC,OACP,mCACC,cAAC,EAAD,MAEDC,SAASC,eAAe,W","file":"static/js/main.98004334.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n   \r\n    const handleInputChange = (e) => {\r\n        setInputValue (e.target.value);\r\n    }\r\n\r\n    const handleSumit = (e) => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 3){\r\n            setCategories (cats =>[inputValue,...cats]);\r\n            setInputValue(' ');\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={handleSumit}>\r\n            <input \r\n                type=\"text\"\r\n                value= {inputValue}\r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","\r\n\r\n export const getGifs = async( category ) =>{\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=8&api_key=ICFwmo4K4cipCJLdT28zMKzQYrVImrIJ`\r\n        const resp = await fetch( url);\r\n        const {data} =  await resp.json();\r\n\r\n        const gifs = data.map( img =>{\r\n            return {\r\n                id : img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        });\r\n        return gifs;\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    console.log({id, title, url});\r\n\r\n    return (\r\n        <div className=\"card\">\r\n             <p> { title }</p>\r\n            <img src= { url } alt= { title} />\r\n        </div>\r\n    )\r\n}\r\n","//import React, { useState, useEffect} from 'react';\r\nimport React from 'react';\r\n\r\nimport { useFetchGifs } from '../Hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    // useEffect( () => {\r\n    //     getGifs( category )\r\n    //         .then( setImages );\r\n    //     //SI VOS PONES UN ARREGLO VACIO A LO ULTIMO LE AVISA AL PROGRAMA QUE ESTO SE VA A EJECUTAR UNA VES, ES UN ARREGLO DE DEPENDENCIA\r\n    //     //EVITA LA EJECUCION EN EL LINEA Y REITERADAS VECES\r\n    // }, [ category])\r\n\r\nconst { data, loading } = useFetchGifs( category );\r\n    // const getGifs = async() =>{\r\n    //     const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=8&api_key=ICFwmo4K4cipCJLdT28zMKzQYrVImrIJ`\r\n    //     const resp = await fetch( url);\r\n    //     const {data} =  await resp.json();\r\n\r\n    //     const gifs = data.map( img =>{\r\n    //         return {\r\n    //             id : img.id,\r\n    //             title: img.title,\r\n    //             url: img.images?.downsized_medium.url\r\n    //         }\r\n    //     });\r\n    //     console.log(gifs);\r\n    //     setImages(gifs);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h3> { category } </h3>\r\n            { loading && <p>Loading...</p>}\r\n            <div className=\"card-grid\">           \r\n                {\r\n                    // //CUANDO PONES ENTRE () ES UN RETURN IMPLISITO, Y NO HACE FALTA PONER RETURN , SI LO PONES ENTR {} , SI TENES QUE PONE RETURN \r\n                    // images.map( ({id , title}) => (\r\n                    //     //OBLIGATORIO PONER EL KEY PARA INDENTIFICAR EL OBJETO\r\n                    //     <li key={ id }>{ title }</li>\r\n                    // ))\r\n                    // images.map( img => (\r\n                    //     <GifGridItem \r\n                    //         key = { img.id }\r\n                    //         //PERMITE ENVIAR CADA UNA DE LAS PROPIEDADES DE MANERA INDEPENDIENTE\r\n                    //         { ...img }/>\r\n                    // ))\r\n                    data.map( img => (\r\n                        <GifGridItem \r\n                            key = { img.id }\r\n                            //PERMITE ENVIAR CADA UNA DE LAS PROPIEDADES DE MANERA INDEPENDIENTE\r\n                            { ...img }/>\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","//el use es un estandar para lo hooks\r\n\r\nimport { useState,useEffect } from \"react\"\r\nimport { getGifs } from \"../Helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const  [state, setState] = useState({\r\n        data :[],\r\n        loading: true\r\n    });\r\n\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setTimeout(() => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                    \r\n                }, 3000);\r\n            } );\r\n        //SI VOS PONES UN ARREGLO VACIO A LO ULTIMO LE AVISA AL PROGRAMA QUE ESTO SE VA A EJECUTAR UNA VES, ES UN ARREGLO DE DEPENDENCIA\r\n        //EVITA LA EJECUCION EN EL LINEA Y REITERADAS VECES\r\n    }, [category])\r\n\r\n    // setTimeout(() => {\r\n    //     setState({\r\n    //         data: [1,2,3,4,5,6,7,8,9],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000);\r\n    \r\n    return state;\r\n}","import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport AddCategory from './AddCategory';\r\nimport GifGrid from './GifGrid';\r\n\r\nconst GifExpertApp = (props) => {\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    \r\n    // const handleAdd = () =>{\r\n    //      setCategories([...categories,'HunterXHunter']);\r\n    //     //LO MISMO DE ARRIBA DE OTRA FORMA\r\n    //     //setCategories( cats =>[...cats, 'HunterXHunter']);\r\n    // }\r\n    \r\n    return (\r\n        <>\r\n            <h1 >Gif Expert App</h1>\r\n            {/* <button onClick={ handleAdd }style={{textAlign:'right'}}>Agregar</button>*/}\r\n            <hr /> \r\n            <AddCategory setCategories={setCategories}/>\r\n            <ol>\r\n                {\r\n                    // categories.map( category => {\r\n                    //     //OBLIGATORIO PONER EL KEY PARA INDENTIFICAR EL OBJETO\r\n                    //     return <li key={ category }>{ category }</li>\r\n                    // })\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                        key={category} \r\n                        category={category}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nGifExpertApp.propTypes = {\r\n\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './Components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <>\n   <GifExpertApp />\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}